openapi: 3.0.4
info:
  description: API gateway for dataservices providing data access and management for
    IKlik services.
  title: IKlik Backend Services
  version: 1.0.0
servers:
- url: https://localhost:8000/api/v1
tags:
- description: Management of experiments
  name: experiments
- description: Results for given experiments
  name: results
- description: Operations about users
  name: users
- description: Operations related to videos in the Infrastructure Portal
  name: videos
- description: Operations related to encoders in the Infrastructure Portal
  name: encoders
- description: Operations related to networks in the Infrastructure Portal
  name: networks
- name: auth
  description: Authentication related operations
paths:
  /experiments:
    get:
      description: List experiments for a given user.
      operationId: getExperiments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
          description: Successful operation
        '400':
          description: Invalid request
        '422':
          description: Validation exception
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: List experiments.
      tags:
      - experiments
    post:
      description: Create a new experiment under a given user.
      operationId: createExperiment
      requestBody:
        $ref: '#/components/requestBodies/Experiment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
          description: Successful operation
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a new experiment.
      tags:
      - experiments
  /experiments/{experimentId}:
    delete:
      description: Delete an experiment.
      operationId: deleteExperiment
      parameters:
      - description: ID to uniquely identify an experiment.
        explode: false
        in: path
        name: experimentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          description: Experiment deleted
        '400':
          description: Invalid experiment value
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete an experiment.
      tags:
      - experiments
    get:
      description: Get full details of an experiment by its unique ID.
      operationId: getExperiment
      parameters:
      - description: ID to uniquely identify an experiment.
        explode: false
        in: path
        name: experimentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Experiment'
          description: Successful operation
        '400':
          description: Invalid status value
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get experiment by ID.
      tags:
      - experiments
    put:
      description: This can only be done by the user who owns the experiment.
      operationId: updateExperiment
      parameters:
      - description: ID to uniquely identify an experiment.
        explode: false
        in: path
        name: experimentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/Experiment'
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: experiment not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update an experiment.
      tags:
      - experiments
  /experiments/{experimentId}/status:
    get:
      description: Retrieve the current status and progress of an experiment.
      operationId: getExperimentStatus
      parameters:
      - description: Unique ID to identify the experiment.
        explode: false
        in: path
        name: experimentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperimentStatus'
          description: Experiment status retrieved successfully.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Experiment not found.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error while retrieving experiment status.
      summary: Get experiment status
      tags:
      - experiments
  /experiments/{experimentId}/results:
    get:
      description: Get list of files to download for results.
      operationId: getExperimentResults
      parameters:
      - description: ID to uniquely identify an experiment.
        explode: false
        in: path
        name: experimentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid status value
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get results for an experiment.
      tags:
      - experiments
      - results
    post:
      description: This can only be done by the logged in user.
      operationId: uploadResults
      parameters:
      - description: ID to uniquely identify an experiment.
        explode: false
        in: path
        name: experimentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadResults'
        description: Results to upload along with metadata
      responses:
        '200':
          description: Successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Upload results for an experiment.
      tags:
      - experiments
      - results
  /users:
    post:
      description: This can only be done by the superuser.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create a user.
      tags:
      - users
  /users/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The username that needs to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete user resource.
      tags:
      - users
    get:
      description: Get uses detail based on username.
      operationId: getUserByName
      parameters:
      - description: The name that needs to be fetched. Use users1 for testing
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Get user by username.
      tags:
      - users
    put:
      description: This can only be done by the logged in user or superuser.
      operationId: updateUser
      parameters:
      - description: name that need to be deleted
        explode: false
        in: path
        name: username
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Bad request
        '404':
          description: User not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update user resource.
      tags:
      - users
  /infrastructure/videos:
    get:
      description: Fetch a list of all available videos.
      operationId: getVideos
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Video'
                type: array
          description: A list of videos
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve videos list
      tags:
      - videos
    post:
      description: Upload a new video to the infrastructure portal (Super User access
        required).
      operationId: createVideo
      requestBody:
        $ref: '#/components/requestBodies/Video'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: Video created successfully
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid video upload data
        '415':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unsupported media type for video upload.
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Video file validation error.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create video
      tags:
      - videos
  /infrastructure/videos/{id}:
    delete:
      description: Delete a specific video by ID (Super User access required).
      operationId: deleteVideo
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: Video deleted
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Video not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete video
      tags:
      - videos
    get:
      description: Fetch a specific video by ID.
      operationId: getVideo
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Video'
          description: Video details
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Video not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve video
      tags:
      - videos
  /infrastructure/encoders:
    get:
      description: Fetch a list of all encoders.
      operationId: getEncoders
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Encoder'
                type: array
          description: A list of encoders
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve encoder list
      tags:
      - encoders
    post:
      description: Create a new encoder (Super User access required).
      operationId: createEncoder
      requestBody:
        $ref: '#/components/requestBodies/Encoder'
      responses:
        '200':
          description: Encoder created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid payload
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create encoder
      tags:
      - encoders
  /infrastructure/encoders/{id}:
    delete:
      description: Delete a specific encoder (Super User access required).
      operationId: deleteEncoder
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encoder'
          description: Encoder deleted
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Encoder not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete encoder
      tags:
      - encoders
    get:
      description: Fetch a specific encoder by ID.
      operationId: getEncoder
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Encoder'
          description: Encoder details
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Encoder not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve encoder
      tags:
      - encoders
    put:
      description: Update an existing encoder (Super User access required).
      operationId: updateEncoder
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/Encoder'
      responses:
        '200':
          description: Encoder updated
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid payload
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Encoder not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Update encoder
      tags:
      - encoders
  /infrastructure/networks:
    get:
      description: Fetch a list of all networks.
      operationId: getNetworks
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Network'
                type: array
          description: A list of networks
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve networks list
      tags:
      - networks
    post:
      description: Upload a new network (Super User access required).
      operationId: createNetwork
      requestBody:
        $ref: '#/components/requestBodies/Network'
      responses:
        '200':
          description: Network created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Invalid payload
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Create network
      tags:
      - networks
  /infrastructure/networks/{id}:
    delete:
      description: Delete a specific network by ID (Super User access required).
      operationId: deleteNetwork
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
          description: Network deleted
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Network not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Delete network
      tags:
      - networks
    get:
      description: Fetch a specific network by ID.
      operationId: getNetwork
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Network'
          description: Network details
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Network not found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unexpected error
      summary: Retrieve network
      tags:
      - networks
  /auth/login:
    post:
      summary: User login
      description: Authenticate a user with username and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized - invalid credentials
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      tags:
      - auth
      security: []
components:
  requestBodies:
    Experiment:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ExperimentInput'
      description: Experiment object that needs to be added to the store
    Video:
      content:
        multipart/form-data:
          schema:
            $ref: '#/components/schemas/UploadVideo'
      description: Video object that needs to be added to the store
    Network:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NetworkInput'
      description: Network object that needs to be added to the store
    Encoder:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EncoderInput'
      description: Encoder object to be added to the store
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserInput'
      description: User object creation and update in store
  schemas:
    Experiment:
      example:
        networkConditions:
          delay: 50ms
          packetLoss: 2%
        createdAt: 2024-04-01 10:00:00+00:00
        metricsRequested:
        - PSNR
        - PSNR
        encodingParameters:
          codec: h264
          bitrate: 5000kbps
          resolution: 1920x1080
        description: An experiment testing video encodings.
        videoSources:
        - video1.mp4
        - video1.mp4
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        experimentName: My Test Experiment
        status: pending
      properties:
        id:
          format: uuid
          title: id
          type: string
        experimentName:
          example: My Test Experiment
          title: experimentName
          type: string
        description:
          example: An experiment testing video encodings.
          title: description
          type: string
        videoSources:
          items:
            example: video1.mp4
            type: string
          title: videoSources
          type: array
        encodingParameters:
          $ref: '#/components/schemas/EncodingParameters'
        networkConditions:
          $ref: '#/components/schemas/NetworkConditions'
        metricsRequested:
          items:
            example: PSNR
            type: string
          title: metricsRequested
          type: array
        status:
          example: pending
          title: status
          type: string
        createdAt:
          example: 2024-04-01 10:00:00+00:00
          format: date-time
          title: createdAt
          type: string
      required:
      - encodingParameters
      - experimentName
      - metricsRequested
      - networkConditions
      - videoSources
      title: Experiment
      type: object
    ExperimentInput:
      example:
        networkConditions:
          delay: 100ms
          packetLoss: 1%
        metricsRequested:
        - PSNR
        - SSIM
        encodingParameters:
          codec: H.264
          bitrate: 5000kbps
          resolution: 1920x1080
        description: Experiment description text here
        videoSources:
        - video1.mp4
        - video2.mp4
        experimentName: Video Encoding Test
      properties:
        experimentName:
          example: Video Encoding Test
          title: experimentName
          type: string
        description:
          example: Experiment description text here
          title: description
          type: string
        videoSources:
          example:
          - video1.mp4
          - video2.mp4
          items:
            type: string
          title: videoSources
          type: array
        encodingParameters:
          $ref: '#/components/schemas/ExperimentInput'
        networkConditions:
          $ref: '#/components/schemas/ExperimentInput'
        metricsRequested:
          example:
          - PSNR
          - SSIM
          items:
            type: string
          title: metricsRequested
          type: array
      required:
      - encodingParameters
      - experimentName
      - metricsRequested
      - networkConditions
      - videoSources
      title: ExperimentInput
      type: object
    User:
      example:
        firstName: John
        lastName: James
        password: '12345'
        id: 10
        email: john@email.com
        username: theUser
      properties:
        id:
          example: 10
          format: int64
          title: id
          type: integer
        username:
          example: theUser
          title: username
          type: string
        firstName:
          example: John
          title: firstName
          type: string
        lastName:
          example: James
          title: lastName
          type: string
        email:
          example: john@email.com
          title: email
          type: string
        password:
          example: '12345'
          title: password
          type: string
        role:
          title: role
          type: string
          enum:
          - pending
          - user
          - admin
          - super_admin
          default: user
      title: User
      type: object
    UserInput:
      example:
        firstName: John
        lastName: James
        password: '12345'
        email: john@email.com
        username: theUser
      properties:
        username:
          example: theUser
          title: username
          type: string
        firstName:
          example: John
          title: firstName
          type: string
        lastName:
          example: James
          title: lastName
          type: string
        email:
          example: john@email.com
          title: email
          type: string
        password:
          example: '12345'
          title: password
          type: string
        role:
          title: role
          type: string
          enum:
          - pending
          - user
          - admin
          - super_admin
          default: user
      title: UserInput
      type: object
    Error:
      example:
        code: code
        message: message
      properties:
        code:
          title: code
          type: string
        message:
          title: message
          type: string
      required:
      - code
      - message
      title: Error
      type: object
    Video:
      example:
        frameRate: frameRate
        createdDate: 2000-01-23 04:56:07+00:00
        id: id
        video: ''
        resolution: resolution
      properties:
        id:
          title: id
          type: string
        video:
          format: binary
          title: video
          type: string
        frameRate:
          title: frameRate
          type: string
        resolution:
          title: resolution
          type: string
        createdDate:
          format: date-time
          title: createdDate
          type: string
      title: Video
      type: object
    Encoder:
      example:
        name: name
        encoderCode: encoderCode
        layers:
        - ''
        - ''
        id: 0
        encoderType: encoderType
      properties:
        id:
          title: id
          type: integer
        name:
          title: name
          type: string
        encoderType:
          title: encoderType
          type: string
        encoderCode:
          title: encoderCode
          type: string
        layers:
          items:
            format: binary
            type: string
          title: layers
          type: array
      title: Encoder
      type: object
    EncoderInput:
      example:
        name: name
        encoderCode: encoderCode
        layers:
        - ''
        - ''
        id: 0
        encoderType: encoderType
      properties:
        id:
          title: id
          type: integer
        name:
          title: name
          type: string
        encoderType:
          title: encoderType
          type: string
        encoderCode:
          title: encoderCode
          type: string
        layers:
          items:
            format: binary
            type: string
          title: layers
          type: array
      title: EncoderInput
      type: object
    Network:
      example:
        name: name
        id: 0
        networkType: networkType
      properties:
        id:
          title: id
          type: integer
        name:
          title: name
          type: string
        networkType:
          title: networkType
          type: string
      title: Network
      type: object
    ExperimentStatus:
      example:
        progress: 45
        experimentId: 123e4567-e89b-12d3-a456-426614174000
        status: running
      properties:
        experimentId:
          example: 123e4567-e89b-12d3-a456-426614174000
          title: experimentId
          type: string
        status:
          example: running
          title: status
          type: string
        progress:
          description: Progress percentage (0-100)
          example: 45
          title: progress
          type: integer
      title: getExperimentStatus_200_response
      type: object
    UploadVideo:
      properties:
        video:
          format: binary
          type: string
        frameRate:
          type: string
        resolution:
          type: string
      type: object
    NetworkInput:
      example:
        name: name
        networkType: networkType
      properties:
        name:
          title: name
          type: string
        networkType:
          title: networkType
          type: string
      title: NetworkInput
      type: object
    EncodingParameters:
      example:
        codec: h264
        bitrate: 5000kbps
        resolution: 1920x1080
      properties:
        codec:
          example: h264
          title: codec
          type: string
        bitrate:
          example: 5000kbps
          title: bitrate
          type: string
        resolution:
          example: 1920x1080
          title: resolution
          type: string
      title: EncodingParameters
      type: object
    NetworkConditions:
      example:
        delay: 50ms
        packetLoss: 2%
      properties:
        packetLoss:
          example: 2%
          title: packetLoss
          type: string
        delay:
          example: 50ms
          title: delay
          type: string
      title: NetworkConditions
      type: object
    UploadResults:
      properties:
        filename:
          items:
            format: binary
            type: string
          type: array
      type: object
    LoginRequest:
      type: object
      required:
      - username
      - password
      properties:
        username:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token to be used in Authorization header
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []
